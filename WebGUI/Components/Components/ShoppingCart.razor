@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Model.Entites
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage ProtectedSessionStore
@inject CartState CartState
@rendermode InteractiveServer


@code {
    [Parameter]
    public int ItemCount { get; set; }
    public event Action? OnChange;
    public List<Dish> Dishes { get; set; } = new List<Dish>();

    protected override async Task OnInitializedAsync()
    {
        base.OnInitializedAsync();
        await LoadSessionData();
    }
    
    
    public async Task AddItem(Dish dish)
    {
        Dishes.Add(dish);
        CartState.AddToTotal(dish.Price);
        NavigationManager.NavigateTo("/mainDishesView");
        ItemCount = Dishes.Count;
        await ProtectedSessionStore.SetAsync("Dishes", Dishes);
        NotifyStateChanged();
    }

    private async Task LoadSessionData()
    {
        try
        {
            var dishesResult = await ProtectedSessionStore.GetAsync<List<Dish>>("Dishes");
            if (dishesResult.Success && dishesResult.Value != null)
            {
                Dishes = dishesResult.Value;
                ItemCount = Dishes.Count;
                NotifyStateChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading session: {ex.Message}");
        }
    }
    
    //Todo Test this code
    public async Task ClearSession()
    {
        try
        {
            if (!OperatingSystem.IsBrowser()) return;

            await ProtectedSessionStore.DeleteAsync("Dishes");
            Dishes.Clear();
            ItemCount = 0;
            NotifyStateChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error clearing session: {ex.Message}");
        }
    }

    private void NotifyStateChanged() => OnChange?.Invoke();
}