@page "/mainDishesView"
@using System.Security.Claims
@using Domain.Repositories.Interfaces
@using Model.Entites
@using WebGUI.Components.Components
@inject IRepositoryAsync<Dish> DishRepositoryAsync
@inject IRepositoryAsync<Category> CategoryRepository
@inject IRepositoryAsync<CategoriesDishesJT> CategoriesDishesJTRepoAsync; 
@inject IRepositoryAsync<User> UserRepoAsync
@inject IHttpContextAccessor HttpContextAccessor;
@inject AuthenticationStateProvider AuthenticationStateProvider






<div class="container mainDishesView">
    
    <div class="d-flex justify-content-center my-5">
        <h4>Hauptspeisen</h4>
    </div>
    <div class="d-flex justify-content-around">
        
        @foreach (var category in Categories)
        {
            <ShoppingCart @ref="cartRef" ItemCount="itemCount" />
            <a @onclick="() => UpdateDishes(category.CategoriesId)">
                @category.Name
            </a>

        }
    </div>
    <hr>

    
        
    <div class="row g-4">
        
        @foreach (var dish in dishes)
        {
            
            <div class="col-lg-4 col-md-4 col-sm-12">
                <DishComponent OnAddToCart="() => AddToCart(dish)" Dish="dish"></DishComponent>
             
            </div>
        }
    </div>
</div>



@code {
    private ShoppingCart? cartRef;
    private int itemCount = 0;
    List<Dish> dishes = new();
    private List<Category> Categories { get; set; } = new();
    //private string UserName;
    //private List<User> CurrentUser = new(); 

    protected override async Task OnInitializedAsync()
    {
        Categories = await CategoryRepository.ReadAsync(c => c.MainType == "H");
        var categoryIds = Categories.Select(c => c.CategoriesId).ToList();

        var categoriesDishes = await CategoriesDishesJTRepoAsync.ReadAsync(cd => categoryIds.Contains(cd.CategoryId));

        var dishIds = categoriesDishes.Select(cd => cd.DishId).Distinct().ToList();

        dishes = await DishRepositoryAsync.ReadAsync(d => dishIds.Contains(d.DishId));
    }

    
    
    
    #region Filter

    private async void UpdateDishes(int categoryId)
    {
        dishes.Clear();
        List<CategoriesDishesJT> categoriesDishes = new();
        categoriesDishes = await CategoriesDishesJTRepoAsync.ReadAsync(cd => cd.CategoryId == categoryId);
        
        foreach (var cd in categoriesDishes)
        {
            dishes.Add(await DishRepositoryAsync.ReadAsync(cd.DishId));
        }
        StateHasChanged();
    }
    private async Task AddToCart(Dish dish)
    {
        if (cartRef != null)
        {
            await cartRef.AddItem(dish);
            itemCount = cartRef.ItemCount;
        }
    }
    
    
    
    
    #endregion

  

    
}

