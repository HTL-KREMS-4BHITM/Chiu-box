@page "/mainDishesView"
@using System.Security.Claims
@using Domain.Repositories.Interfaces
@using Model.Entites
@using WebGUI.Components.Components
@inject IRepositoryAsync<Dish> DishRepositoryAsync
@inject IRepositoryAsync<Category> CategoryRepository
@inject IRepositoryAsync<CategoriesDishesJT> CategoriesDishesJTRepoAsync; 
@inject IRepositoryAsync<User> UserRepoAsync
@inject IHttpContextAccessor HttpContextAccessor;
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<div class="container mainDishesView">
    
    <div class="d-flex justify-content-center my-5">
        <h4>Hauptspeisen</h4>
        <ShoppingCart @ref="cartRef"/>
    </div>
    <div class="categories d-flex row g-2">
        
        @foreach (var category in Categories)
        {
            <a class="col-lg-1 col-6 text-center" @onclick="() => UpdateDishes(category.CategoriesId)">
                @category.Name
            </a>

        }
    </div>
    <hr>

    
        
    <div class="row g-4">
        
        @foreach (var dish in GetPagedBikes())
        {
            
            <div class="col-lg-4 col-md-4 col-sm-12">
                <DishComponent OnAddToCart="() => AddToCart(dish)" Dish="dish"></DishComponent>
            </div>
        }
        <div class="mt-5 text-center text-muted">
            <h5>Allergeneinformationen</h5>
            <p>
                A: Gluten, B: Krebstiere, C: Eier, D: Fisch, E: Erdnüsse, F: Soja, G: Milch (einschließlich Laktose), H: Schalenfrüchte,<br> L: Sellerie, M: Senf, N: Sesam, O: Schwefeldioxid und Sulfite, P: Lupinen und Weichtiere.
            </p>
        </div>
        <!-- Pagination -->
        @if (_totalPages > 1)
        {
            
            <nav aria-label="Page navigation example" class="d-flex justify-content-center">
                <ul class="pagination">
                    <li class="page-item @( _currentPage == 1 ? "disabled" : "" )">
                        <button class="page-link" @onclick="PreviousPage">Prev</button>
                    </li>

                    @for (int i = 1; i <= _totalPages; i++)
                    {
                        int pageNumber = i; 
                        <li class="page-item @( _currentPage == pageNumber ? "active" : "" )">
                            <button class="page-link" @onclick="() => GoToPage(pageNumber)">@pageNumber</button>
                        </li>
                    }


                    <li class="page-item @( _currentPage == _totalPages ? "disabled" : "" )">
                        <button class="page-link" @onclick="NextPage">Next</button>
                    </li>
                </ul>
            </nav>
        }

    </div>
</div>



@code {
    private ShoppingCart? cartRef;
   // private Pagination? paginationRef;

    List<Dish> dishes = new();
    private List<Category> Categories { get; set; } = new();
    private int _pageSize = 20;
    private int _totalPages;
    private int _currentPage = 1;
    //private string UserName;
    //private List<User> CurrentUser = new(); 

    //error
    protected override async Task OnInitializedAsync()
    {
        Categories = await CategoryRepository.ReadAsync(c => c.MainType == "H");
        var categoryIds = Categories.Select(c => c.CategoriesId).ToList();

        var categoriesDishes = await CategoriesDishesJTRepoAsync.ReadAsync(cd => categoryIds.Contains(cd.CategoryId));

        var dishIds = categoriesDishes.Select(cd => cd.DishId).Distinct().ToList();

        dishes = await DishRepositoryAsync.ReadAsync(d => dishIds.Contains(d.DishId));
        UpdateTotalPages(dishes);
    }

    #region ShoppingCart
    private async Task AddToCart(Dish dish)
    {
        if (cartRef != null)
        {
            await cartRef.AddItem(dish);
        }
        StateHasChanged(); 
    }
    #endregion
    
    
    #region Pagination
    private List<Dish> GetPages()
    {
     
       
        StateHasChanged();
        return GetPagedBikes();

    }
    private void UpdateTotalPages(List<Dish> dishList)
    {

        _totalPages = (int)Math.Ceiling((double)dishList.Count / _pageSize);

    }
    public List<Dish> GetPagedBikes()
    {
        return dishes.Skip((_currentPage - 1) * _pageSize).Take(_pageSize).ToList();
    }
    private void NextPage()
    {
        if (_currentPage < _totalPages)
        {
            _currentPage++;
            InvokeAsync(StateHasChanged);
        }
    }

    private void PreviousPage()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
            InvokeAsync(StateHasChanged);
        }
    }

    private void GoToPage(int pageNumber)
    {
        if (pageNumber >= 1 && pageNumber <= _totalPages)
        {
            _currentPage = pageNumber;
            InvokeAsync(() =>
            {
               
                StateHasChanged();
            });
        }
    }

    #endregion
    
    
    #region Filter

    private async void UpdateDishes(int categoryId)
    {
        dishes.Clear();
        List<CategoriesDishesJT> categoriesDishes = new();
        categoriesDishes = await CategoriesDishesJTRepoAsync.ReadAsync(cd => cd.CategoryId == categoryId);
        
        foreach (var cd in categoriesDishes)
        {
            dishes.Add(await DishRepositoryAsync.ReadAsync(cd.DishId));
        }
        UpdateTotalPages(dishes);
        _currentPage = 1;
        StateHasChanged();
    }
    
    
    #endregion

  

    
}

