@page "/order"
@using Domain.Repositories.Interfaces
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Model.Entites
@using WebGUI.Components.Components
@inject ProtectedSessionStorage ProtectedSessionStore
@inject EmailService EmailService
@rendermode InteractiveServer

<div class="container mainDishesView">
    <div class="d-flex justify-content-center my-5">
        <h4>Warenkorb</h4>
    </div>

    @if (dishQuantities.Count == 0)
    {
        <p>Bis jetzt keine Speisen...</p>
    }
    else
    {
        <div class="d-flex justify-content-center">
            <h5 class="mt-4 mb-4">Schritt 1: Speisen festlegen</h5>
        </div>
        <div class="row g-4">
            @foreach (var dishEntry in dishQuantities)
            {
                var dish = dishEntry.Key;
                var quantity = dishEntry.Value;

                <div class="col-lg-4 col-md-4 col-sm-12">
                    <OrderComponent Dish="dish"
                                    Quantity="quantity"
                                    OnQuantityChanged="(q) => UpdateQuantity(dish, q)"
                                    OnRemove="() => RemoveDish(dish)" />
                </div>
            }
        </div>

        <div class="d-flex justify-content-center">
            <h5 class="mt-4 mb-4">Schritt 2: Speisen kontrollieren</h5>
        </div>
        <div class="d-flex justify-content-center">
            <div class="d-flex justify-content-center rounded" style="background-color: #D3D3D3">
                <table style="width: 40vw; border-collapse: collapse; font-size: 1.1rem;">
                    @{
                        total = 0;
                    }
                    @foreach (var dishEntry in dishQuantities)
                    {
                        var dish = dishEntry.Key;
                        var quantity = dishEntry.Value;
                        var price = dish.Price * quantity;
                        total += price;

                        <tr>
                            <td style="width: 20%; padding: 8px;">@($"{quantity} x")</td>
                            <td style="width: 60%; padding: 8px;">@dish.Name</td>
                            <td style="width: 20%; padding: 8px; text-align: right;">@price.ToString("C")</td>
                        </tr>
                    }
                    <tr style="font-weight: bold; border-top: 2px solid #333;">
                        <td style="padding: 8px;">Total</td>
                        <td></td>
                        <td style="padding: 8px; text-align: right;">@total.ToString("C")</td>
                    </tr>
                </table>
            </div>
        </div>

        <div class="d-flex justify-content-center">
            <h5 class="mt-4 mb-4">Schritt 3: Bestellart auswählen</h5>
        </div>

        <div class="d-flex justify-content-center mb-3">
            <div class="form-check mx-2">
                <input class="form-check-input" type="radio" id="eatIn" value="E" @onchange="() => SetOrderType('E')" checked="@((orderType == 'E'))" />
                <label class="form-check-label" for="eatIn">Im Restaurant essen</label>
            </div>
            <div class="form-check mx-2">
                <input class="form-check-input" type="radio" id="delivery" value="D" @onchange="() => SetOrderType('D')" checked="@((orderType == 'D'))" />
                <label class="form-check-label" for="delivery">Liefern lassen</label>
            </div>
        </div>

        @if (!string.IsNullOrWhiteSpace(Status))
        {
            <div class="text-center mt-2">
                <small class="@AlertClass">@Status</small>
            </div>
        }

        <EditForm Model="@this" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="d-flex justify-content-center">
                <div style="max-width: 500px; width: 100%;">
                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <InputText class="form-control" @bind-Value="customerName" required />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <InputText class="form-control" @bind-Value="email" type="email" required />
                    </div>

                    @if (orderType == 'D')
                    {
                        <div class="mb-3">
                            <label class="form-label">Straße</label>
                            <InputText class="form-control" @bind-Value="street" required />
                        </div>

                        <div class="row">
                            <div class="col">
                                <label class="form-label">Hausnummer</label>
                                <InputText class="form-control" @bind-Value="houseNumber" required />
                            </div>
                            <div class="col">
                                <label class="form-label">Stiege (optional)</label>
                                <InputText class="form-control" @bind-Value="staircase" />
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col">
                                <label class="form-label">PLZ</label>
                                <InputText class="form-control" @bind-Value="zipCode" required />
                            </div>
                            <div class="col">
                                <label class="form-label">Ort</label>
                                <InputText class="form-control" @bind-Value="city" required />
                            </div>
                        </div>
                    }

                    <div class="mb-3 mt-3">
                        <label class="form-label">Telefonnummer</label>
                        <InputText class="form-control"
                                   type="tel"
                                   @bind-Value="customerNumber"
                                   pattern="^[0-9+\s\-]{6,20}$"
                                   title="Bitte eine gültige Telefonnummer eingeben (z. B. +43 123 456789)"
                                   required />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Zeit (mindestens 30 Minuten ab jetzt)</label>
                        <input type="time" class="form-control" @bind="selectedTime" required />
                        @if (!isValidTime)
                        {
                            <small class="text-danger d-block mt-1">Bitte wählen Sie eine Zeit mindestens 30 Minuten ab jetzt.</small>
                        }
                    </div>

                    <button type="submit" class="btn btn-primary mt-3 border-0" style="background-color: #457123">
                        Bestellung abschicken
                    </button>
                </div>
            </div>
        </EditForm>
    }
</div>

@code {
    private Dictionary<Dish, int> dishQuantities = new();
    private char orderType = 'E';
    private string customerName = string.Empty;
    private string email = string.Empty;
    private string street = string.Empty;
    private string houseNumber = string.Empty;
    private string staircase = string.Empty;
    private string zipCode = string.Empty;
    private string city = string.Empty;
    private string customerNumber;
    private TimeOnly selectedTime = TimeOnly.FromDateTime(DateTime.Now.AddMinutes(30));
    private bool isValidTime = true;
    private decimal total;
    private string Status;
    private string AlertClass = "text-success";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await ProtectedSessionStore.GetAsync<List<Dish>>("Dishes");
            if (result.Success && result.Value != null)
            {
                foreach (var dish in result.Value)
                {
                    var existing = dishQuantities.Keys.FirstOrDefault(d => d.DishId == dish.DishId);
                    if (existing != null)
                        dishQuantities[existing]++;
                    else
                        dishQuantities[dish] = 1;
                }

                await UpdateSession();
            }
            StateHasChanged();
        }
    }

    private async Task UpdateQuantity(Dish dish, int quantity)
    {
        if (dishQuantities.ContainsKey(dish))
        {
            if (quantity <= 0)
                dishQuantities.Remove(dish);
            else
                dishQuantities[dish] = quantity;

            await UpdateSession();
        }
    }

    private async Task RemoveDish(Dish dish)
    {
        if (dishQuantities.ContainsKey(dish))
        {
            dishQuantities.Remove(dish);
            await UpdateSession();
        }
    }

    private async Task UpdateSession()
    {
        var dishList = dishQuantities.SelectMany(kvp => Enumerable.Repeat(kvp.Key, kvp.Value)).ToList();
        await ProtectedSessionStore.SetAsync("Dishes", dishList);
    }

    private void SetOrderType(char type)
    {
        orderType = type;
        selectedTime = TimeOnly.FromDateTime(DateTime.Now.AddMinutes(30));
    }

    private async Task HandleSubmit()
    {
        var now = DateTime.Now;
        var selectedDateTime = new DateTime(now.Year, now.Month, now.Day,
                                            selectedTime.Hour, selectedTime.Minute, 0);
        isValidTime = selectedDateTime >= now.AddMinutes(30);

        if (!isValidTime)
        {
            Status = "Die gewählte Uhrzeit muss mindestens 30 Minuten in der Zukunft liegen.";
            AlertClass = "text-danger";
            return;
        }

        string fullAddress = orderType == 'D'
            ? $"{street} {houseNumber}, {(string.IsNullOrWhiteSpace(staircase) ? "" : $"Stiege {staircase}, ")}{zipCode} {city}"
            : "";

        try
        {
            await EmailService.SendOrderConfirmation(customerName, fullAddress, email, customerNumber, dishQuantities, total, orderType, selectedTime);
            Status = "Bestellung erfolgreich versendet!";
            AlertClass = "text-success";
        }
        catch (Exception ex)
        {
            Status = $"Fehler beim Senden der E-Mail: {ex.Message}";
            AlertClass = "text-danger";
        }
    }
}
