@page "/admin"
@using Domain.Repositories.Interfaces
@using Model.Entites
@inject IRepositoryAsync<Dish> DishRepositoryAsync
@inject IRepositoryAsync<CategoriesDishesJT> CategoryDishesJTRepositoryAsync
@inject IRepositoryAsync<ShopSchedule> ScheduleRepoAsync
@rendermode InteractiveServer

<style>
    .grayed-out {
        opacity: 0.5;
    }

    .toolbar {
        position: fixed;
        right: 20px;
        top: 100px;
    }

    .edit-row td {
        background-color: #f8f9fa;
    }
</style>

<div class="container mt-5">
    <h3 class="d-flex justify-content-center mb-4">Management</h3>

    <div class="mb-4">
        <button class="btn btn-success" @onclick="ToggleCreateForm">
            @(showCreateForm ? "Hide" : "New Dish")
        </button>
    </div>

    @if (showCreateForm)
    {
        <div class="card mb-5">
            <div class="card-header">Create New Dish</div>
            <div class="card-body">
                <EditForm Model="@newDish" OnValidSubmit="CreateDish">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <InputText class="form-control" @bind-Value="newDish.Name" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <InputText class="form-control" @bind-Value="newDish.Description" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Code</label>
                        <InputText class="form-control" @bind-Value="newDish.Code" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Price</label>
                        <InputNumber class="form-control" @bind-Value="newDish.Price" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Categories</label>
                        @foreach (var category in categoryOptions)
                        {
                            <div class="form-check">
                                <input type="checkbox"
                                       class="form-check-input"
                                       id="cat_@category.Id"
                                       value="@category.Id"
                                       checked="@selectedCategoryIds.Contains(category.Id)"
                                       @onchange="() => ToggleCategorySelection(category.Id)" />
                                <label class="form-check-label" for="cat_@category.Id">@category.Name</label>
                            </div>
                        }
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Supplement Type</label>
                        <InputText class="form-control" @bind-Value="newDish.SupplementType" />
                    </div>

                    <button type="submit" class="btn btn-primary">Add Dish</button>
                </EditForm>
            </div>
        </div>
    }

    @if (dishes == null)
    {
        <div>Loading...</div>
    }
    else
    {
        <div class="row">
            <div class="col-md-9">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th><input type="checkbox" @onclick="ToggleAll" /></th>
                            <th>Code</th>
                            <th>Name</th>
                            <th>Description</th>
                            <th>Price</th>
                            <th>Status</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var dish in dishes)
                        {
                            <tr class="@((dish.IsOutOfStock ? "table-secondary" : ""))">
                                <td><input type="checkbox" @bind="dish.IsSelected" /></td>
                                <td>@dish.Code</td>
                                <td>@dish.Name</td>
                                <td>@dish.Description</td>
                                <td>@dish.Price.ToString("C")</td>
                                <td>@(dish.IsOutOfStock ? "Out of Stock" : "Verfügbar")</td>
                                <td>
                                    <button class="btn btn-sm btn-outline-success" @onclick="() => EditDish(dish)">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                </td>
                            </tr>

                            @if (selectedDish != null && selectedDish.DishId == dish.DishId)
                            {
                                <tr class="edit-row">
                                    <td colspan="7">
                                        <div class="p-3 border rounded bg-light">
                                            <EditForm Model="@selectedDish" OnValidSubmit="SaveDish">
                                                <DataAnnotationsValidator />
                                                <div class="mb-3">
                                                    <label class="form-label">Name</label>
                                                    <InputText class="form-control" @bind-Value="selectedDish.Name" />
                                                </div>
                                                <div class="mb-3">
                                                    <label class="form-label">Description</label>
                                                    <InputText class="form-control" @bind-Value="selectedDish.Description" />
                                                </div>
                                                <div class="mb-3">
                                                    <label class="form-label">Code</label>
                                                    <InputText class="form-control" @bind-Value="selectedDish.Code" />
                                                </div>
                                                <div class="mb-3">
                                                    <label class="form-label">Price</label>
                                                    <InputNumber class="form-control" @bind-Value="selectedDish.Price" />
                                                </div>
                                                <button type="submit" class="btn btn-success">Save</button>
                                                <button type="button" class="btn btn-secondary ms-2" @onclick="CancelEdit">Cancel</button>
                                            </EditForm>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>

            <div class="col-md-3">
                <div class="border rounded p-3 bg-light sticky-top mb-4" style="top: 100px;">
                    <h5>Actions</h5>
                    <button class="btn btn-danger w-100 mb-2" @onclick="DeleteSelected">Delete Selected</button>
                    <button class="btn btn-warning w-100" @onclick="ToggleOutOfSale">Mark Out of Sale</button>
                </div>
                <h5 class="mt-5 mb-3">Onlineshop ausschalten</h5>
                <table class="table border">
                    
                    <tbody>
                    @if (scheduled.Count != 0)
                    {
                        <tr>
                            <th scope="row">MO</th>
                            <td><input type="time" @bind="scheduled[0].StartTime"/></td>
                            <td><input type="time" @bind="scheduled[0].EndTime"/></td>
                        </tr>
                        <tr>
                            <th scope="row">DI</th>
                            <td><input type="time" @bind="scheduled[1].StartTime"/></td>
                            <td><input type="time" @bind="scheduled[1].EndTime"/></td>
                        </tr>
                        <tr>
                            <th scope="row">MI</th>
                            <td><input type="time" @bind="scheduled[2].StartTime"/></td>
                            <td><input type="time" @bind="scheduled[2].EndTime"/></td>
                        </tr>
                        <tr>
                            <th scope="row">DO</th>
                            <td><input type="time" @bind="scheduled[3].StartTime"/></td>
                            <td><input type="time" @bind="scheduled[3].EndTime"/></td>
                        </tr>
                        <tr>
                            <th scope="row">FR</th>
                            <td><input type="time" @bind="scheduled[4].StartTime"/></td>
                            <td><input type="time" @bind="scheduled[4].EndTime"/></td>
                        </tr>
                        <tr>
                            <th scope="row">SA</th>
                            <td><input type="time" @bind="scheduled[5].StartTime"/></td>
                            <td><input type="time" @bind="scheduled[5].EndTime"/></td>
                        </tr>
                        <tr>
                            <th scope="row">SO</th>
                            <td><input type="time" @bind="scheduled[6].StartTime"/></td>
                            <td><input type="time" @bind="scheduled[6].EndTime"/></td>
                        </tr>
                    }
                    </tbody>
                </table>
                <div class="d-flex justify-content-center">
                    <button class="btn btn-primary btn-success col-3 me-2">Start</button>
                    <button class="btn btn-primary btn-danger col-3 me-2" >Stop</button>
                    <button class="btn btn-primary btn-primary col-3">Save</button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<Dish> dishes;
    private Dish selectedDish;
    private Dish newDish = new();
    private bool showCreateForm = false;
    private List<ShopSchedule> scheduled = new();

    private List<int> selectedCategoryIds = new();
    private List<(int Id, string Name)> categoryOptions = new()
    {
        (10, "Vorspeisen"),
        (11, "Salate"),
        (12, "Suppen"),
        (1, "Hauptspeisen"),
        (2, "Reisgerichte"),
        (3, "Nudelgerichte"),
        (4, "Bento-Box"),
        (5, "Vegetarisch"),
        (6, "Japanisch"),
        (7, "Indische Küche"),
        (8, "Taiwanische Küche"),
        (9, "Kids-Box"),
        (13, "Desserts"),
        (14, "Beilagen")
    };

    protected override async Task OnInitializedAsync()
    {
        dishes = await DishRepositoryAsync.ReadAllAsync();
        scheduled = await ScheduleRepoAsync.ReadAllAsync();
        Console.WriteLine(scheduled.Count);
    }

    private void ToggleCreateForm()
    {
        showCreateForm = !showCreateForm;
    }

    private void ToggleCategorySelection(int categoryId)
    {
        if (selectedCategoryIds.Contains(categoryId))
        {
            selectedCategoryIds.Remove(categoryId);
        }
        else
        {
            selectedCategoryIds.Add(categoryId);
        }
    }

    private async Task CreateDish()
    {
        await DishRepositoryAsync.CreateAsync(newDish);

        foreach (var categoryId in selectedCategoryIds)
        {
            await CategoryDishesJTRepositoryAsync.CreateAsync(new CategoriesDishesJT
            {
                DishId = newDish.DishId,
                CategoryId = categoryId
            });
        }

        newDish = new Dish();
        selectedCategoryIds.Clear();
        dishes = await DishRepositoryAsync.ReadAllAsync();
        showCreateForm = false;
    }

    private void EditDish(Dish dish)
    {
        if (selectedDish != null && selectedDish.DishId == dish.DishId)
        {
            selectedDish = null;
        }
        else
        {
            selectedDish = new Dish
            {
                DishId = dish.DishId,
                Name = dish.Name,
                Description = dish.Description,
                Price = dish.Price,
                Code = dish.Code
            };
        }
    }

    private async Task SaveDish()
    {
        await DishRepositoryAsync.UpdateAsync(selectedDish);
        selectedDish = null;
        dishes = await DishRepositoryAsync.ReadAllAsync();
    }

    private void CancelEdit()
    {
        selectedDish = null;
    }

    private async Task DeleteSelected()
    {
        var toDelete = dishes.Where(d => d.IsSelected).Select(d => d.DishId).ToList();
        foreach (var id in toDelete)
        {
            await DishRepositoryAsync.DeleteAsync(id);
        }
        dishes = await DishRepositoryAsync.ReadAllAsync();
    }

    private async Task ToggleOutOfSale()
    {
        var selected = dishes.Where(d => d.IsSelected).ToList();
        foreach (var d in selected)
        {
            d.IsOutOfStock = !d.IsOutOfStock;
            await DishRepositoryAsync.UpdateAsync(d);
        }
        dishes = await DishRepositoryAsync.ReadAllAsync();
    }

    private void ToggleAll()
    {
        bool anyUnchecked = dishes.Any(d => !d.IsSelected);
        foreach (var dish in dishes)
        {
            dish.IsSelected = anyUnchecked;
        }
    }
}
