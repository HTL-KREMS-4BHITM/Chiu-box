@page "/admin"
@using Domain.Repositories.Interfaces
@using Model.Entites
@inject IRepositoryAsync<Dish> DishRepositoryAsync
@inject IRepositoryAsync<CategoriesDishesJT> CategoryDishesJTRepositoryAsync
@inject IRepositoryAsync<Category> CategoryAsync
@inject IRepositoryAsync<ShopSchedule> ScheduleRepoAsync
@rendermode InteractiveServer

<style>
    .grayed-out {
        opacity: 0.5;
    }

    .toolbar {
        position: fixed;
        right: 20px;
        top: 100px;
    }

    .edit-row td {
        background-color: #f8f9fa;
    }
</style>

<AuthorizeView>
    <NotAuthorized>
        <p>Not authorized</p>
    </NotAuthorized>
    <Authorized Context="auth">
        <div class="container mt-5">
    <h3 class="d-flex justify-content-center mb-4">Management</h3>

    <div class="mb-4">
        <button class="btn btn-success me-2" @onclick="ToggleCreateForm">
            @(showCreateForm ? "Hide" : "New Dish")
        </button>
        <button class="btn " @onclick="ToggleCategoryForm" style="background-color: #156abf; color: whitesmoke">
            @(showCategoryForm ? "Hide" : "New Category")
        </button>
    </div>
    @if (showCategoryForm)
    {
        <div class="card mb-4">
            <div class="card-header">Create New Category</div>
            <div class="card-body">
                <EditForm Model="@newCategory" OnValidSubmit="CreateCategory">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label class="form-label">Category Name</label>
                        <InputText class="form-control" @bind-Value="newCategory.Name" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Kategorieart</label>
                        <InputSelect class="form-select" @bind-Value="newCategory.MainType">
                            <option value="">-- bitte wählen --</option>
                            <option value="H">Hauptspeise</option>
                            <option value="V">Vorspeise</option>
                            <option value="B">Beilage</option>
                            <option value="D">Dessert</option>
                        </InputSelect>
                    </div>

                    <button type="submit" class="btn btn-success">Add Category</button>
                </EditForm>
            </div>
        </div>
    }


    @if (showCreateForm)
    {
        <div class="card mb-5">
            <div class="card-header">Create New Dish</div>
            <div class="card-body">
                <EditForm Model="@newDish" OnValidSubmit="CreateDish">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <InputText class="form-control" @bind-Value="newDish.Name" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <InputText class="form-control" @bind-Value="newDish.Description" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Code</label>
                        <InputText class="form-control" @bind-Value="newDish.Code" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Price</label>
                        <InputNumber class="form-control" @bind-Value="newDish.Price" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Categories</label>
                        @foreach (var category in categoryOptions)
                        {
                            <div class="form-check">
                                <input type="checkbox"
                                       class="form-check-input"
                                       id="cat_@category.Id"
                                       value="@category.Id"
                                       checked="@selectedCategoryIds.Contains(category.Id)"
                                       @onchange="() => ToggleCategorySelection(category.Id)" />
                                <label class="form-check-label" for="cat_@category.Id">@category.Name</label>
                            </div>
                        }
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Supplement Type</label>
                        <InputText class="form-control" @bind-Value="newDish.SupplementType" />
                    </div>

                    <button type="submit" class="btn btn-primary">Add Dish</button>
                </EditForm>
            </div>
        </div>
    }

    @if (dishes == null)
    {
        <div>Loading...</div>
    }
    else
    {
        <div class="row">
            <div class="col-md-9">
                <h4 class="mb-3">Kategorien</h4>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Name (Typ)</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var category in allCategories)
                        {
                            if (selectedCategory != null && selectedCategory.CategoriesId == category.CategoriesId)
                            {
                                <tr class="edit-row">
                                    <td>
                                        <InputText class="form-control" @bind-Value="selectedCategory.Name" />
                                    </td>
                                    <td>
                                        <InputSelect class="form-select" @bind-Value="selectedCategory.MainType">
                                            <option value="">-- bitte wählen --</option>
                                            <option value="H">Hauptspeise</option>
                                            <option value="V">Vorspeise</option>
                                            <option value="B">Beilage</option>
                                            <option value="D">Dessert</option>
                                        </InputSelect>
                                    </td>
                                    <td>
                                        <button class="btn btn-success btn-sm me-1" @onclick="SaveCategory">Speichern</button>
                                        <button class="btn btn-secondary btn-sm" @onclick="CancelCategoryEdit">Abbrechen</button>
                                    </td>
                                </tr>
                            }
                            else
                            {
                                <tr>
                                    <td colspan="3">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div>
                                                <strong>@category.Name</strong> &nbsp; <span class="text-muted">(@GetTypeName(category.MainType))</span>
                                            </div>
                                            <div>
                                                <button class="btn btn-sm btn-outline-success me-1" @onclick="() => EditCategory(category)">
                                                    <i class="bi bi-pencil"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteCategory(category)">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </td>
                                </tr>

                            }
                        }
                    </tbody>
                </table>
                <h4 class="mb-3 mt-5">Gerichte</h4>
                <table class="table table-striped">
                    <thead>
                    <tr>
                        <th><input type="checkbox" @onclick="ToggleAll"/></th>
                        <th>Code</th>
                        <th>Name</th>
                        <th>Description</th>
                        <th>Price</th>
                        <th>Status</th>
                        <th></th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var dish in dishes)
                    {
                        <tr class="@((dish.IsOutOfStock ? "table-secondary" : ""))">
                            <td><input type="checkbox" @bind="dish.IsSelected"/></td>
                            <td>@dish.Code</td>
                            <td>@dish.Name</td>
                            <td>@dish.Description</td>
                            <td>@dish.Price.ToString("C")</td>
                            <td>@(dish.IsOutOfStock ? "Out of Stock" : "Verfügbar")</td>
                            <td>
                                <button class="btn btn-sm btn-outline-success" @onclick="() => EditDish(dish)">
                                    <i class="bi bi-pencil"></i>
                                </button>
                            </td>
                        </tr>

                        @if (selectedDish != null && selectedDish.DishId == dish.DishId)
                        {
                            <tr class="edit-row">
                                <td colspan="7">
                                    <div class="p-3 border rounded bg-light">
                                        <EditForm Model="@selectedDish" OnValidSubmit="SaveDish">
                                            <DataAnnotationsValidator/>
                                            <div class="mb-3">
                                                <label class="form-label">Name</label>
                                                <InputText class="form-control" @bind-Value="selectedDish.Name"/>
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">Description</label>
                                                <InputText class="form-control" @bind-Value="selectedDish.Description"/>
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">Code</label>
                                                <InputText class="form-control" @bind-Value="selectedDish.Code"/>
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">Price</label>
                                                <InputNumber class="form-control" @bind-Value="selectedDish.Price"/>
                                            </div>
                                            <div class="mb-3">
                                                <label class="form-label">Kategorien</label>
                                                <div class="row">
                                                    @foreach (var group in categoryOptions.Chunk(3))
                                                    {
                                                        <div class="col-md-4">
                                                            @foreach (var category in group)
                                                            {
                                                                <div class="form-check" style="margin-bottom: 0.3rem;">
                                                                    <input type="checkbox"
                                                                           class="form-check-input"
                                                                           id="edit_cat_@category.Id"
                                                                           checked="@editingCategoryIds.Contains(category.Id)"
                                                                           @onchange="@(() => ToggleEditCategory(category.Id))"/>
                                                                    <label class="form-check-label" for="edit_cat_@category.Id">@category.Name</label>
                                                                </div>
                                                            }
                                                        </div>
                                                    }
                                                </div>
                                            </div>


                                            <button type="submit" class="btn btn-success">Save</button>
                                            <button type="button" class="btn btn-secondary ms-2" @onclick="CancelEdit">Cancel</button>

                                        </EditForm>
                                    </div>
                                </td>
                            </tr>


                        }
                    }
                    </tbody>
                </table>
            </div>

            <div class="col-md-3">
                <div class="border rounded p-3 bg-light sticky-top mb-4" style="top: 100px;">
                    <h5>Actions</h5>
                    <button class="btn  w-100 mb-2" @onclick="DeleteSelected" style="background-color: #b00000; color: whitesmoke">Delete Selected</button>
                    <button class="btn  w-100" @onclick="ToggleOutOfSale" style="background-color: #006b0b; color: whitesmoke">Mark Out of Sale</button>
                    <h5 class="mt-5 mb-3">Onlineshop ausschalten</h5>
                    <table class="table border">
                        
                        <tbody>
                        @if (scheduled.Count != 0)
                        {
                            <tr>
                                <th scope="row">MO</th>
                                <td><input type="time" @bind="scheduled[0].StartTime"/></td>
                                <td><input type="time" @bind="scheduled[0].EndTime"/></td>
                            </tr>
                            <tr>
                                <th scope="row">DI</th>
                                <td><input type="time" @bind="scheduled[1].StartTime"/></td>
                                <td><input type="time" @bind="scheduled[1].EndTime"/></td>
                            </tr>
                            <tr>
                                <th scope="row">MI</th>
                                <td><input type="time" @bind="scheduled[2].StartTime"/></td>
                                <td><input type="time" @bind="scheduled[2].EndTime"/></td>
                            </tr>
                            <tr>
                                <th scope="row">DO</th>
                                <td><input type="time" @bind="scheduled[3].StartTime"/></td>
                                <td><input type="time" @bind="scheduled[3].EndTime"/></td>
                            </tr>
                            <tr>
                                <th scope="row">FR</th>
                                <td><input type="time" @bind="scheduled[4].StartTime"/></td>
                                <td><input type="time" @bind="scheduled[4].EndTime"/></td>
                            </tr>
                            <tr>
                                <th scope="row">SA</th>
                                <td><input type="time" @bind="scheduled[5].StartTime"/></td>
                                <td><input type="time" @bind="scheduled[5].EndTime"/></td>
                            </tr>
                            <tr>
                                <th scope="row">SO</th>
                                <td><input type="time" @bind="scheduled[6].StartTime"/></td>
                                <td><input type="time" @bind="scheduled[6].EndTime"/></td>
                            </tr>
                        }
                        </tbody>
                    </table>
                    <div class="text-center mb-2">
                        <span class="badge @GetStatusBadgeClass()">
                            Shop Status: @shopStatus
                        </span>
                    </div>


                    <div class="d-flex justify-content-center">
                        <button class="btn  col-3 me-2" @onclick="StartShop" style="background-color: #006b0b; color: whitesmoke">Start</button>
                        <button class="btn  col-3 me-2" @onclick="StopShop" style="background-color: #b00000; color: whitesmoke">Stop</button>
                        <button class="btn  col-3 me-2" @onclick="ResetControlTimer" style="background-color: #b5b5b5; color: black">Reset</button>
                        <button class="btn  col-3" @onclick="SaveSchedule" style="background-color:#156abf; color: whitesmoke">Save</button>
                    </div>
                </div>


            </div>
        </div>
    }
</div>

    </Authorized>
</AuthorizeView>

@code {
    private List<Dish> dishes;
    private Dish selectedDish;
    private Dish newDish = new();
    private bool showCreateForm = false;
    private List<ShopSchedule> scheduled = new();
    private List<int> editingCategoryIds = new();
    private bool isShopRunning;
    private string shopStatus = string.Empty;


    private List<int> selectedCategoryIds = new();
    private List<(int Id, string Name)> categoryOptions = new()
    {
        (10, "Vorspeisen"),
        (11, "Salate"),
        (12, "Suppen"),
        (1, "Hauptspeisen"),
        (2, "Reisgerichte"),
        (3, "Nudelgerichte"),
        (4, "Bento-Box"),
        (5, "Vegetarisch"),
        (6, "Japanisch"),
        (7, "Indische Küche"),
        (8, "Taiwanische Küche"),
        (9, "Kids-Box"),
        (13, "Desserts"),
        (14, "Beilagen")
    };
    private bool showCategoryForm = false;
    private Category newCategory = new();
    private List<Category> allCategories = new();

    protected override async Task OnInitializedAsync()
    {
        dishes = await DishRepositoryAsync.ReadAllAsync();
        scheduled = await ScheduleRepoAsync.ReadAllAsync();

        var controlEntry = scheduled.FirstOrDefault(s => s.Day == "Current");
        if (controlEntry == null)
        {
            var dummy = new ShopSchedule
            {
                Day = "Current",
                StartTime = new TimeOnly(0, 0),
                EndTime = new TimeOnly(0, 0)
            };
            await ScheduleRepoAsync.CreateAsync(dummy);
            scheduled.Add(dummy);
        }

        UpdateShopStatus();

        allCategories = await CategoryAsync.ReadAllAsync();
        categoryOptions = allCategories.Select(c => (c.CategoriesId, c.Name)).ToList();
    }



    private void ToggleCategoryForm()
    {
        showCategoryForm = !showCategoryForm;
    }

    private async Task CreateCategory()
    {
        await CategoryAsync.CreateAsync(newCategory);
        newCategory = new Category();
        showCategoryForm = false;
    }

    // protected override async Task OnInitializedAsync()
    // {
    //     dishes = await DishRepositoryAsync.ReadAllAsync();
    //     scheduled = await ScheduleRepoAsync.ReadAllAsync();
    //     Console.WriteLine(scheduled.Count);
    // }

    private void ToggleCreateForm()
    {
        showCreateForm = !showCreateForm;
    }

    private void ToggleCategorySelection(int categoryId)
    {
        if (selectedCategoryIds.Contains(categoryId))
        {
            selectedCategoryIds.Remove(categoryId);
        }
        else
        {
            selectedCategoryIds.Add(categoryId);
        }
    }

    private async Task CreateDish()
    {
        await DishRepositoryAsync.CreateAsync(newDish);

        foreach (var categoryId in selectedCategoryIds)
        {
            await CategoryDishesJTRepositoryAsync.CreateAsync(new CategoriesDishesJT
            {
                DishId = newDish.DishId,
                CategoryId = categoryId
            });
        }

        newDish = new Dish();
        selectedCategoryIds.Clear();
        dishes = await DishRepositoryAsync.ReadAllAsync();
        showCreateForm = false;
    }

    private async Task EditDish(Dish dish)
    {
        if (selectedDish != null && selectedDish.DishId == dish.DishId)
        {
            selectedDish = null;
        }
        else
        {
            selectedDish = new Dish
            {
                DishId = dish.DishId,
                Name = dish.Name,
                Description = dish.Description,
                Price = dish.Price,
                Code = dish.Code
            };

            var allLinks = await CategoryDishesJTRepositoryAsync.ReadAllAsync();
            editingCategoryIds = allLinks
                .Where(jt => jt.DishId == dish.DishId)
                .Select(jt => jt.CategoryId)
                .ToList();
        }
    }


    private async Task SaveDish()
    {
        await DishRepositoryAsync.UpdateAsync(selectedDish);

        var allLinks = await CategoryDishesJTRepositoryAsync.ReadAllAsync();
        var existingLinks = allLinks
            .Where(jt => jt.DishId == selectedDish.DishId)
            .Select(jt => jt.CategoryId)
            .ToList();

        var toAdd = editingCategoryIds.Except(existingLinks);
        var toRemove = existingLinks.Except(editingCategoryIds);

        foreach (var catId in toRemove)
        {
            await CategoryDishesJTRepositoryAsync.DeleteAsync(new CategoriesDishesJT
            {
                DishId = selectedDish.DishId,
                CategoryId = catId
            });
        }

        foreach (var catId in toAdd)
        {
            await CategoryDishesJTRepositoryAsync.CreateAsync(new CategoriesDishesJT
            {
                DishId = selectedDish.DishId,
                CategoryId = catId
            });
        }

        selectedDish = null;
        editingCategoryIds.Clear();
        dishes = await DishRepositoryAsync.ReadAllAsync();
    }



    private void CancelEdit()
    {
        selectedDish = null;
    }

    private async Task DeleteSelected()
    {
        var toDelete = dishes.Where(d => d.IsSelected).Select(d => d.DishId).ToList();
        foreach (var id in toDelete)
        {
            await DishRepositoryAsync.DeleteAsync(id);
        }
        dishes = await DishRepositoryAsync.ReadAllAsync();
    }

    private async Task ToggleOutOfSale()
    {
        var selected = dishes.Where(d => d.IsSelected).ToList();
        foreach (var d in selected)
        {
            d.IsOutOfStock = !d.IsOutOfStock;
            await DishRepositoryAsync.UpdateAsync(d);
        }
        dishes = await DishRepositoryAsync.ReadAllAsync();
    }

    private void ToggleAll()
    {      
        bool anyUnchecked = dishes.Any(d => !d.IsSelected);
        foreach (var dish in dishes)
        {
            dish.IsSelected = anyUnchecked;
        }
    }
    private void ToggleEditCategory(int categoryId)
    {
        if (editingCategoryIds.Contains(categoryId))
        {
            editingCategoryIds.Remove(categoryId);
        }
        else
        {
            editingCategoryIds.Add(categoryId);
        }
    }
    private async Task SaveSchedule()
    {
        foreach (var entry in scheduled)
        {
            await ScheduleRepoAsync.UpdateAsync(entry);
        }
    }
    private bool IsOffline(TimeOnly? now, TimeOnly? start, TimeOnly? end)
    {
        if (start == end) return false; 

        if (start < end)
            return now >= start && now < end; 

        return now >= start || now < end; 
    }

    
    private void UpdateShopStatus()
    {
        var now = TimeOnly.FromDateTime(DateTime.Now);
        var today = DateTime.Now.DayOfWeek.ToString();

        var overrideEntry = scheduled.FirstOrDefault(s => s.Day == "Current");
        var dayEntry = scheduled.FirstOrDefault(s => s.Day.Equals(today, StringComparison.OrdinalIgnoreCase));

        if (overrideEntry != null && IsOffline(now, overrideEntry.StartTime, overrideEntry.EndTime))
        {
            isShopRunning = false;
            shopStatus = "Offline (Override)";
            return;
        }

        if (dayEntry != null && IsOffline(now, dayEntry.StartTime, dayEntry.EndTime))
        {
            isShopRunning = false;
            shopStatus = "Offline";
        }
        else
        {
            isShopRunning = true;
            shopStatus = "Online";
        }
    }







    private string GetStatusBadgeClass()
    {
        return isShopRunning ? "bg-success text-white" : "bg-danger text-white";
    }

    private async Task StartShop()
    {
        var controlEntry = scheduled.FirstOrDefault(s => s.Day == "Current");
        if (controlEntry == null) return;

        controlEntry.StartTime = TimeOnly.FromDateTime(DateTime.Now);
        controlEntry.EndTime = new TimeOnly(23, 59);

        await ScheduleRepoAsync.UpdateAsync(controlEntry);

        scheduled = await ScheduleRepoAsync.ReadAllAsync();
        UpdateShopStatus();
    }


    private async Task StopShop()
    {
        var controlEntry = scheduled.FirstOrDefault(s => s.Day == "Current");
        if (controlEntry == null) return;

        controlEntry.StartTime = new TimeOnly(0, 0);
        controlEntry.EndTime = new TimeOnly(0, 0); 

        await ScheduleRepoAsync.UpdateAsync(controlEntry);

        scheduled = await ScheduleRepoAsync.ReadAllAsync();
        UpdateShopStatus();
    }
    private async Task ResetControlTimer()
    {
        var controlEntry = scheduled.FirstOrDefault(s => s.Day == "Current");
        if (controlEntry == null) return;

        controlEntry.StartTime = null;
        controlEntry.EndTime = null;

        await ScheduleRepoAsync.UpdateAsync(controlEntry);
        scheduled = await ScheduleRepoAsync.ReadAllAsync();
        UpdateShopStatus();
    }
    private Category selectedCategory;

    private void EditCategory(Category category)
    {
        selectedCategory = new Category
        {
            CategoriesId = category.CategoriesId,
            Name = category.Name,
            MainType = category.MainType
        };
    }

    private async Task SaveCategory()
    {
        if (selectedCategory != null)
        {
            await CategoryAsync.UpdateAsync(selectedCategory);
            selectedCategory = null;
            allCategories = await CategoryAsync.ReadAllAsync();
        }
    }

    private void CancelCategoryEdit()
    {
        selectedCategory = null;
    }

    private string GetTypeName(string mainType)
    {
        return mainType switch
        {
            "H" => "Hauptspeise",
            "V" => "Vorspeise",
            "B" => "Beilage",
            "D" => "Dessert",
            _ => "-"
        };
    }

    private async Task DeleteCategory(Category category)
    {
        // Optional: Also remove junction table links if necessary
        var allLinks = await CategoryDishesJTRepositoryAsync.ReadAllAsync();
        var linked = allLinks.Where(jt => jt.CategoryId == category.CategoriesId);

        foreach (var link in linked)
        {
            await CategoryDishesJTRepositoryAsync.DeleteAsync(link);
        }

        await CategoryAsync.DeleteAsync(category.CategoriesId);
        allCategories = await CategoryAsync.ReadAllAsync();
        categoryOptions = allCategories.Select(c => (c.CategoriesId, c.Name)).ToList();
    }


}
